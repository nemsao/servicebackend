syntax = "proto3";

package event;

option go_package = "proto/event";

service EventService {
  rpc CreateEvent(CreateEventRequest) returns (EventResponse) {}
  rpc GetEvent(GetEventRequest) returns (EventResponse) {}
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {}
  rpc UpdateEvent(UpdateEventRequest) returns (EventResponse) {}
  rpc DeleteEvent(DeleteEventRequest) returns (DeleteEventResponse) {}
  rpc SearchEvents(SearchEventsRequest) returns (ListEventsResponse) {}
}

message Event {
  string id = 1; // UUID
  string title = 2;
  string description = 3;
  string short_description = 4;
  int64 category_id = 5; // BIGINT
  string organizer_id = 6; // UUID
  int64 venue_id = 7; // BIGINT
  string start_date = 8;
  string end_date = 9;
  string registration_start_date = 10;
  string registration_end_date = 11;
  bool is_featured = 12;
  bool is_private = 13;
  string status = 14;
  int32 max_attendees = 15;
  string thumbnail_url = 16;
  string banner_url = 17;
  string website = 18;
  string contact_email = 19;
  string contact_phone = 20;
  string terms_and_conditions = 21;
  string additional_info = 22;
  string created_at = 23;
  string updated_at = 24;
}

message CreateEventRequest {
  string title = 1;
  string description = 2;
  string short_description = 3;
  int64 category_id = 4; // BIGINT
  string organizer_id = 5; // UUID
  int64 venue_id = 6; // BIGINT
  string start_date = 7;
  string end_date = 8;
  string registration_start_date = 9;
  string registration_end_date = 10;
  bool is_featured = 11;
  bool is_private = 12;
  int32 max_attendees = 13;
  string thumbnail_url = 14;
  string banner_url = 15;
  string website = 16;
  string contact_email = 17;
  string contact_phone = 18;
  string terms_and_conditions = 19;
  string additional_info = 20;
}

message GetEventRequest {
  string event_id = 1; // UUID
}

message ListEventsRequest {
  int32 page = 1;
  int32 page_size = 2;
  int64 category_id = 3; // BIGINT
  string organizer_id = 4; // UUID
  string status = 5;
}

message ListEventsResponse {
  repeated Event events = 1;
  int32 total_count = 2;
  int32 page = 3;
  int32 page_size = 4;
}

message UpdateEventRequest {
  string event_id = 1; // UUID
  string title = 2;
  string description = 3;
  string short_description = 4;
  int64 category_id = 5; // BIGINT
  int64 venue_id = 6; // BIGINT
  string start_date = 7;
  string end_date = 8;
  string registration_start_date = 9;
  string registration_end_date = 10;
  bool is_featured = 11;
  bool is_private = 12;
  string status = 13;
  int32 max_attendees = 14;
  string thumbnail_url = 15;
  string banner_url = 16;
  string website = 17;
  string contact_email = 18;
  string contact_phone = 19;
  string terms_and_conditions = 20;
  string additional_info = 21;
}

message DeleteEventRequest {
  string event_id = 1; // UUID
}

message DeleteEventResponse {
  bool success = 1;
}

message SearchEventsRequest {
  string query = 1;
  int32 page = 2;
  int32 page_size = 3;
  repeated int64 categories = 4; // BIGINT
  string start_date = 5;
  string end_date = 6;
  string location = 7;
}

message EventResponse {
  Event event = 1;
}
