// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: seat_service.proto

package seat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SeatService_CreateSeat_FullMethodName       = "/seat.SeatService/CreateSeat"
	SeatService_UpdateSeat_FullMethodName       = "/seat.SeatService/UpdateSeat"
	SeatService_DeleteSeat_FullMethodName       = "/seat.SeatService/DeleteSeat"
	SeatService_GetSeat_FullMethodName          = "/seat.SeatService/GetSeat"
	SeatService_ListSeatsByEvent_FullMethodName = "/seat.SeatService/ListSeatsByEvent"
)

// SeatServiceClient is the client API for SeatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service định nghĩa các thao tác với Seat
type SeatServiceClient interface {
	CreateSeat(ctx context.Context, in *CreateSeatRequest, opts ...grpc.CallOption) (*CreateSeatResponse, error)
	UpdateSeat(ctx context.Context, in *UpdateSeatRequest, opts ...grpc.CallOption) (*UpdateSeatResponse, error)
	DeleteSeat(ctx context.Context, in *DeleteSeatRequest, opts ...grpc.CallOption) (*DeleteSeatResponse, error)
	GetSeat(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error)
	ListSeatsByEvent(ctx context.Context, in *ListSeatsByEventRequest, opts ...grpc.CallOption) (*ListSeatsByEventResponse, error)
}

type seatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatServiceClient(cc grpc.ClientConnInterface) SeatServiceClient {
	return &seatServiceClient{cc}
}

func (c *seatServiceClient) CreateSeat(ctx context.Context, in *CreateSeatRequest, opts ...grpc.CallOption) (*CreateSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSeatResponse)
	err := c.cc.Invoke(ctx, SeatService_CreateSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatServiceClient) UpdateSeat(ctx context.Context, in *UpdateSeatRequest, opts ...grpc.CallOption) (*UpdateSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSeatResponse)
	err := c.cc.Invoke(ctx, SeatService_UpdateSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatServiceClient) DeleteSeat(ctx context.Context, in *DeleteSeatRequest, opts ...grpc.CallOption) (*DeleteSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSeatResponse)
	err := c.cc.Invoke(ctx, SeatService_DeleteSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatServiceClient) GetSeat(ctx context.Context, in *GetSeatRequest, opts ...grpc.CallOption) (*GetSeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatResponse)
	err := c.cc.Invoke(ctx, SeatService_GetSeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatServiceClient) ListSeatsByEvent(ctx context.Context, in *ListSeatsByEventRequest, opts ...grpc.CallOption) (*ListSeatsByEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSeatsByEventResponse)
	err := c.cc.Invoke(ctx, SeatService_ListSeatsByEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeatServiceServer is the server API for SeatService service.
// All implementations must embed UnimplementedSeatServiceServer
// for forward compatibility.
//
// Service định nghĩa các thao tác với Seat
type SeatServiceServer interface {
	CreateSeat(context.Context, *CreateSeatRequest) (*CreateSeatResponse, error)
	UpdateSeat(context.Context, *UpdateSeatRequest) (*UpdateSeatResponse, error)
	DeleteSeat(context.Context, *DeleteSeatRequest) (*DeleteSeatResponse, error)
	GetSeat(context.Context, *GetSeatRequest) (*GetSeatResponse, error)
	ListSeatsByEvent(context.Context, *ListSeatsByEventRequest) (*ListSeatsByEventResponse, error)
	mustEmbedUnimplementedSeatServiceServer()
}

// UnimplementedSeatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSeatServiceServer struct{}

func (UnimplementedSeatServiceServer) CreateSeat(context.Context, *CreateSeatRequest) (*CreateSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeat not implemented")
}
func (UnimplementedSeatServiceServer) UpdateSeat(context.Context, *UpdateSeatRequest) (*UpdateSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeat not implemented")
}
func (UnimplementedSeatServiceServer) DeleteSeat(context.Context, *DeleteSeatRequest) (*DeleteSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeat not implemented")
}
func (UnimplementedSeatServiceServer) GetSeat(context.Context, *GetSeatRequest) (*GetSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeat not implemented")
}
func (UnimplementedSeatServiceServer) ListSeatsByEvent(context.Context, *ListSeatsByEventRequest) (*ListSeatsByEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeatsByEvent not implemented")
}
func (UnimplementedSeatServiceServer) mustEmbedUnimplementedSeatServiceServer() {}
func (UnimplementedSeatServiceServer) testEmbeddedByValue()                     {}

// UnsafeSeatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatServiceServer will
// result in compilation errors.
type UnsafeSeatServiceServer interface {
	mustEmbedUnimplementedSeatServiceServer()
}

func RegisterSeatServiceServer(s grpc.ServiceRegistrar, srv SeatServiceServer) {
	// If the following call pancis, it indicates UnimplementedSeatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SeatService_ServiceDesc, srv)
}

func _SeatService_CreateSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).CreateSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatService_CreateSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).CreateSeat(ctx, req.(*CreateSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatService_UpdateSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).UpdateSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatService_UpdateSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).UpdateSeat(ctx, req.(*UpdateSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatService_DeleteSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).DeleteSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatService_DeleteSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).DeleteSeat(ctx, req.(*DeleteSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatService_GetSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).GetSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatService_GetSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).GetSeat(ctx, req.(*GetSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatService_ListSeatsByEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeatsByEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatServiceServer).ListSeatsByEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeatService_ListSeatsByEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatServiceServer).ListSeatsByEvent(ctx, req.(*ListSeatsByEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SeatService_ServiceDesc is the grpc.ServiceDesc for SeatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seat.SeatService",
	HandlerType: (*SeatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSeat",
			Handler:    _SeatService_CreateSeat_Handler,
		},
		{
			MethodName: "UpdateSeat",
			Handler:    _SeatService_UpdateSeat_Handler,
		},
		{
			MethodName: "DeleteSeat",
			Handler:    _SeatService_DeleteSeat_Handler,
		},
		{
			MethodName: "GetSeat",
			Handler:    _SeatService_GetSeat_Handler,
		},
		{
			MethodName: "ListSeatsByEvent",
			Handler:    _SeatService_ListSeatsByEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seat_service.proto",
}
