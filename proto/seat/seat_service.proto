syntax = "proto3";

package seat;

// Bỏ các dòng import không mong muốn
// import "google/protobuf/timestamp.proto";
// import "google/protobuf/struct.proto";

option go_package = "proto/seat";

// Định nghĩa Seat
message Seat {
  string id = 1;
  string event_id = 2;
  string name = 3;
  string row_number = 4;
  string seat_number = 5;
  string coordinates = 6;
  // Thay thế google.protobuf.Struct bằng map<string, string>
  map<string, string> attributes = 7; // Lưu ý: Chỉ cho phép giá trị là chuỗi
  bool is_available = 8;
  // Thay thế google.protobuf.Timestamp bằng int64 (ví dụ: Unix seconds)
  int64 created_at = 9; // Lưu trữ thời gian dưới dạng int64 (ví dụ: Unix seconds)
  int64 updated_at = 10; // Lưu trữ thời gian dưới dạng int64 (ví dụ: Unix seconds)
}

// Yêu cầu tạo seat
message CreateSeatRequest {
  string event_id = 1;
  string name = 2;
  string row_number = 3;
  string seat_number = 4;
  string coordinates = 5;
  // Thay thế google.protobuf.Struct bằng map<string, string>
  map<string, string> attributes = 6; // Chỉ cho phép giá trị là chuỗi
}

// Phản hồi sau khi tạo
message CreateSeatResponse {
  Seat seat = 1;
}

// Yêu cầu cập nhật seat
message UpdateSeatRequest {
  string id = 1;
  string name = 2;
  string row_number = 3;
  string seat_number = 4;
  string coordinates = 5;
  // Thay thế google.protobuf.Struct bằng map<string, string>
  map<string, string> attributes = 6; // Chỉ cho phép giá trị là chuỗi
  bool is_available = 7;
}

// Phản hồi cập nhật seat
message UpdateSeatResponse {
  Seat seat = 1;
}

// Yêu cầu xóa
message DeleteSeatRequest {
  string id = 1;
}

message DeleteSeatResponse {
  bool success = 1;
}

// Lấy thông tin 1 seat
message GetSeatRequest {
  string id = 1;
}

message GetSeatResponse {
  Seat seat = 1;
}

// Danh sách seat theo sự kiện
message ListSeatsByEventRequest {
  string event_id = 1;
}

message ListSeatsByEventResponse {
  repeated Seat seats = 1;
}

// Service định nghĩa các thao tác với Seat
service SeatService {
  rpc CreateSeat(CreateSeatRequest) returns (CreateSeatResponse);
  rpc UpdateSeat(UpdateSeatRequest) returns (UpdateSeatResponse);
  rpc DeleteSeat(DeleteSeatRequest) returns (DeleteSeatResponse);
  rpc GetSeat(GetSeatRequest) returns (GetSeatResponse);
  rpc ListSeatsByEvent(ListSeatsByEventRequest) returns (ListSeatsByEventResponse);

  // Kiểm tra trạng thái ghế
  rpc CheckSeatAvailability(SeatRequest) returns (SeatResponse) {}
  
  // Lấy thông tin tất cả ghế của một sự kiện
  rpc GetAllSeats(EventRequest) returns (SeatsResponse) {}
  
  // Cập nhật trạng thái ghế
  rpc UpdateSeatStatus(UpdateSeatRequest) returns (SeatResponse) {}
}

service RealtimeService {
  // Đăng ký để nhận thông báo realtime cho một sự kiện
  rpc SubscribeToEvent(EventRequest) returns (stream SeatNotification) {}
  
  // Phát thông báo cập nhật ghế đến tất cả clients
  rpc BroadcastSeatUpdate(SeatNotification) returns (google.protobuf.Empty) {}
}